{"version":3,"sources":["DiceRollerD10.tsx","DiceRollerD20.tsx","DiceRoller.tsx","Page.tsx","TopBar.tsx","App.tsx","index.tsx"],"names":["DiceRollerD10","_React$useState","React","useState","_React$useState2","Object","slicedToArray","explodeMax","setExplodeMax","_React$useState3","_React$useState4","oneRemovesSuccess","setOneRemovesSuccess","_React$useState5","_React$useState6","maxCountsTwice","setMaxCountsTwice","_React$useState7","_React$useState8","numberToBeat","setNumberToBeat","_React$useState9","_React$useState10","amountOfDice","setAmountOfDice","_React$useState11","_React$useState12","maxRoll","setMaxRoll","_React$useState13","_React$useState14","modifierString","setModifierString","_React$useState15","_React$useState16","results","setResults","clearResult","react_default","a","createElement","className","type","value","id","onChange","event","target","checked","htmlFor","onFocus","aria-label","e","onClick","modifiers","values","sucesses","extraDiceCount","length","split","index","Math","floor","random","console","log","push","newResults","concat","join","disabled","rows","DiceRollerD20","amountofDices","setAmountofDices","modifierStrings","setModifierStrings","update","setUpdate","diceTypeArray","rollForTotal","diceType","diceCount","modArray","currentResults","diceRollTotal","toString","Fragment","diceArray","_loop","rowKey","diceTypeLabel","textLabel","AmountLabel","ModLabel","key","newAmountofDices","amountofDiceChange","newModifierStrings","modifiersChange","GenerateDice","undefined","$","Number","parseInt","modAmount","emptyArray","DiceRoller","src_DiceRollerD10","roller","setRoller","chooseRollerCheck","is","src_DiceRollerD20","name","defaultChecked","Page","src_DiceRoller","TopBar","Navbar","bg","variant","Container","Nav","Link","href","App","src_TopBar","src_Page","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.d095325d.chunk.js","sourcesContent":["import React from 'react';\n\nfunction DiceRollerD10() {\n\n    // Values set by the user\n    let [explodeMax, setExplodeMax] = React.useState(false)\n    let [oneRemovesSuccess, setOneRemovesSuccess] = React.useState(false)\n    let [maxCountsTwice, setMaxCountsTwice] = React.useState(false)\n    let [numberToBeat, setNumberToBeat] = React.useState(\"\")\n    let [amountOfDice, setAmountOfDice] = React.useState(\"\")\n    let [maxRoll, setMaxRoll] = React.useState(\"\")\n    let [modifierString, setModifierString] = React.useState(\"\")\n\n    // Calculated values\n    let [results, setResults] = React.useState(\"\")\n\n    function rollDice() {\n        let modifiers: string[] = []\n        let values = []\n        let sucesses = 0;\n        let extraDiceCount = 0\n\n        if (modifierString) {\n            if (modifierString.length > 0) {\n                modifiers = modifierString.split(' ')\n            }\n        }\n\n        for (let index = 0; index < +amountOfDice || 0; index++) {\n            let value = Math.floor(Math.random() * +maxRoll);\n            value += 1\n            console.log(explodeMax)\n            if (value === 1 && oneRemovesSuccess) {\n                sucesses -= 1;\n            }\n            if (value >= +maxRoll) {\n                if (explodeMax) {\n                    extraDiceCount += 1;\n                }\n                if (maxCountsTwice) {\n                    sucesses += 1;\n                }\n            }\n            value += +modifiers[index] || 0;\n            if (value >= +numberToBeat) {\n                sucesses += 1;\n            }\n\n            values.push(value);\n        }\n\n        for (let index = 0; index < extraDiceCount; index++) {\n            let value = Math.floor(Math.random() * +maxRoll);\n            value += 1\n            if (value >= +maxRoll) {\n                if (explodeMax) {\n                    extraDiceCount += 1;\n                }\n                if (maxCountsTwice) {\n                    sucesses += 1;\n                }\n            }\n            value += +modifiers[index] || 0;\n            if (value >= +numberToBeat) {\n                sucesses += 1;\n            }\n\n            values.push(value);\n        }\n\n        let newResults = results\n        if (newResults) {\n            newResults += \"\\n\"\n        }\n        newResults += `D${maxRoll}: ` + values.join(\", \")\n        newResults += \"\\nSuccesses = \" + sucesses\n        setResults(newResults)\n    }\n\n    const clearResult = () => {\n        setResults(\"\")\n    }\n\n    const clear = () => {\n        setNumberToBeat(\"\")\n        setAmountOfDice(\"\")\n        setModifierString(\"\")\n        setMaxRoll(\"\")\n        setResults(\"\")\n    }\n\n    return (\n        <div className=\"form\">\n            <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"ExplodeMax\"\n                    onChange={(event) => { setExplodeMax(event.target.checked) }} />\n                <label className=\"form-check-label\" htmlFor=\"ExplodeMax\">\n                    Explode Dice When Max Dice Roll Is Hit\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"OneRemovesSuccess\"\n                    onChange={(event) => { setOneRemovesSuccess(event.target.checked) }} />\n                <label className=\"form-check-label\" htmlFor=\"OneRemovesSuccess\">\n                    Roll of 1 Removes a Success, unless on exploded dice\n                </label>\n            </div>\n            <div className=\"form-check\">\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"MaxCountsTwice\"\n                    onChange={(event) => { setMaxCountsTwice(event.target.checked) }} />\n                <label className=\"form-check-label\" htmlFor=\"MaxCountsTwice\">\n                    Max Rolls Counts as Two Successes\n                </label>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-12\">\n                    <label className=\"form-label\" htmlFor='NumberToBeat'>Number to Beat</label>\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control col-3\"\n                        id=\"NumberToBeat\" aria-label=\"NumberToBeat\" value={numberToBeat}\n                        onChange={(e) => { setNumberToBeat(e.target.value) }} />\n                </div>\n                <div className=\"col-5 col-md-2 col-lg-2 col-xl-2 mr-3\">\n                    <label className=\"form-label\" htmlFor=\"MaxRoll\">Dice Type</label>\n                    <div className='form-inline'>\n                        <div className=\"input-group-prepend\">\n                            <div className=\"input-group-text\">D</div>\n                        </div>\n                        <input type=\"text\" className=\"form-control col\" value={maxRoll}\n                            onChange={(e) => { setMaxRoll(e.target.value) }}\n                            id=\"MaxRoll\" aria-label=\"MaxRoll\" />\n                    </div>\n                </div>\n                <div className=\"col-11\">\n                    <label className=\"form-label\" htmlFor='Amount'>Amount of Dice</label>\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control col-3\" value={amountOfDice}\n                        onChange={(e) => { setAmountOfDice(e.target.value) }}\n                        id=\"Amount\" aria-label=\"Amount\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col-11 mr-3 mb-2\">\n                    <label className=\"form-label\" htmlFor='Mod'>Modifiers (Space Seperated)</label>\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control\" value={modifierString}\n                        onChange={(e) => { setModifierString(e.target.value) }}\n                        id=\"Mod\" aria-label=\"Mod\" />\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <div className=\"btn-group form\">\n                        <button type=\"button\" onClick={rollDice}>Roll</button>\n                        <div className=\"pull-right\">\n                            <button type=\"button\" onClick={clear}>Clear</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n            <div className=\"row\">\n                <div className=\"col\">\n                    <label htmlFor='result'>Result</label>\n                    <textarea className=\"form-control\" disabled={true} rows={8} id=\"result\" value={results}></textarea>\n                </div>\n            </div>\n        </div>\n    );\n}\n\n\n\nexport default DiceRollerD10;\n","import React from 'react';\nimport $ from 'jquery';\n\nfunction DiceRollerD20() {\n\n  // Values set by the user\n  let [amountofDices, setAmountofDices] = React.useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\n  let [modifierStrings, setModifierStrings] = React.useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\n  let [update, setUpdate] = React.useState(0)\n  // Calculated values\n  let [results, setResults] = React.useState(\"\")\n\n  let diceTypeArray = [\"2\", \"4\", \"6\", \"8\", \"10\", \"12\", \"20\", \"100\"]\n\n  function RollDiceButtonClick(event: any) {\n    let currentResults = \"\"\n    for (let index = 0; index < diceTypeArray.length; index++) {\n      let diceType = diceTypeArray[index];\n      if ($(amountofDices[index]) !== undefined && amountofDices[index] !== \"\") {\n        let diceCount = Number.parseInt((amountofDices[index] || \"0\"));\n        let modAmount = modifierStrings[index] || \"\";\n        let modArray: string[] = []\n        if (modAmount) {\n          modArray = modAmount.toString().split(' ')\n        }\n        currentResults = rollForTotal(diceType, diceCount, modArray, currentResults);\n      }\n    }\n    setResults(currentResults)\n  }\n\n  function rollForTotal(diceType: string, diceCount: number, modArray: string[], currentResults: string) {\n    let values = []\n    let diceRollTotal = 0;\n    for (let index = 0; index < diceCount; index++) {\n      let value = Math.floor(Math.random() * +diceType);\n      value += 1\n      value += +modArray[index] || 0;\n      diceRollTotal += value;\n      values.push(value);\n    }\n    console.log(values)\n    let newResults = currentResults\n    if (newResults) {\n      newResults += \"\\n\"\n    }\n    newResults += ` D${diceType} ` + values.toString()\n    newResults += \"\\nTotal = \" + diceRollTotal\n    return newResults\n  }\n\n  const clearResult = () => {\n    setResults(\"\")\n  }\n\n  const clear = () => {\n    let emptyArray = []\n    for (let index = 0; index < diceTypeArray.length; index++) {\n      emptyArray.push(\"\")\n    }\n    setAmountofDices([...emptyArray])\n    setModifierStrings([...emptyArray])\n    setResults(\"\")\n  }\n\n  const amountofDiceChange = (index: number, value: string) => {\n    let newAmountofDices = amountofDices\n    newAmountofDices[index] = value\n    setAmountofDices(newAmountofDices)\n    setUpdate(update + 1)\n  }\n\n  const modifiersChange = (index: number, value: string) => {\n    let newModifierStrings = modifierStrings\n    newModifierStrings[index] = value\n    setModifierStrings(newModifierStrings)\n    setUpdate(update + 1)\n  }\n\n  const GenerateDice = () => {\n    let diceArray: any = []\n    for (let index = 0; index < diceTypeArray.length; index++) {\n      let diceType = diceTypeArray[index];\n      let rowKey = `D${diceType}Key`\n      let diceTypeLabel = `D${diceType}`\n      let textLabel = `D${diceType}Text`;\n      let AmountLabel = `D${diceType}Amount`;\n      let ModLabel = `D${diceType}Mod`;\n      diceArray.push(\n        <div className=\"row\" key={rowKey} >\n          <div className=\"col-2\">\n            <p aria-label={textLabel} id={textLabel}>{diceTypeLabel}</p>\n          </div>\n          <div className=\"col-3\">\n            <input type=\"text\" key={AmountLabel} onFocus={clearResult} className=\"form-control\"\n              id={AmountLabel} aria-label={AmountLabel} value={amountofDices[index]}\n              onChange={(event) => { amountofDiceChange(index, event.target.value) }} />\n          </div>\n          <div className=\"col-7\">\n            <input type=\"text\" key={ModLabel} onFocus={clearResult} className=\"form-control\"\n              id={ModLabel} aria-label={ModLabel} value={modifierStrings[index]}\n              onChange={(event) => { modifiersChange(index, event.target.value) }} />\n          </div>\n        </div>)\n    }\n    return diceArray\n  }\n\n  return (\n    <div>\n      <div className=\"row\">\n        <p className=\"col-2\">Type</p>\n        <p className=\"col-3\">Amount of Dice</p>\n        <p className=\"col-7\">Modifiers (Space Seperated)</p>\n      </div>\n      <>{GenerateDice() || null}</>\n      <div className=\"row\">\n        <div className=\"col-1\">\n          <div className=\"btn-group\">\n            <button type=\"button\" onClick={RollDiceButtonClick}>Roll</button>\n            <div className=\"pull-right\">\n              <button type=\"button\" onClick={clear}>Clear</button>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <label htmlFor='result'>Result</label>\n        <textarea className=\"form-control\" value={results} disabled={true} rows={8} id=\"result\"></textarea>\n      </div>\n      {/* TODO Add Custom die logic here */}\n    </div>\n  );\n}\n\nexport default DiceRollerD20;\n","import React from 'react';\nimport $ from 'jquery';\nimport DiceRollerD10 from './DiceRollerD10';\nimport DiceRollerD20 from './DiceRollerD20';\n\nfunction DiceRoller() {\n\n  const [roller, setRoller] = React.useState(<DiceRollerD10 />)\n\n  const chooseRollerCheck = () => {\n    if ($(\"#DicePoolSystem\").is(':checked')) {\n      setRoller(<DiceRollerD10 />)\n    }\n    if ($(\"#d20System\").is(':checked')) {\n      setRoller(<DiceRollerD20 />)\n    }\n  }\n\n  return (\n    <>\n      <div className=\"form-check\">\n        <input className=\"form-check-input\" type=\"radio\" name=\"RollerChoice\" defaultChecked\n          id=\"DicePoolSystem\" onChange={chooseRollerCheck} />\n        <label className=\"form-check-label\" htmlFor=\"DicePoolSystem\">\n          Dice Pool System\n        </label>\n      </div>\n      <div className=\"form-check\">\n        <input className=\"form-check-input\" type=\"radio\" name=\"RollerChoice\"\n          id=\"d20System\" onChange={chooseRollerCheck} />\n        <label className=\"form-check-label\" htmlFor=\"d20System\">\n          D20 System\n        </label>\n      </div>\n      {roller}\n    </>\n  );\n}\n\nexport default DiceRoller;\n","import React from 'react';\nimport DiceRoller from './DiceRoller';\n\nfunction Page() {\n  return (\n    <div className=\"Page p-4\">\n      <DiceRoller></DiceRoller>\n    </div>\n  );\n}\n\nexport default Page;\n","import React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Container from 'react-bootstrap/Container';\n\nfunction TopBar() {\n  return (\n    <div>\n      <Navbar bg=\"dark\" variant=\"dark\">\n        <Container>\n          <Nav className=\"me-auto\">\n            <Nav.Link href=\"./DiceRoller\">Dice Roller</Nav.Link>\n          </Nav>\n        </Container>\n      </Navbar>\n    </div>\n  );\n}\n\nexport default TopBar;\n","import React from 'react';\nimport Page from './Page';\nimport TopBar from './TopBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopBar></TopBar>\n      <Page></Page>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\nlet root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, root)\n"],"sourceRoot":""}