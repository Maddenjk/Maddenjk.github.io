{"version":3,"sources":["DiceRollerD10.tsx","DiceRollerD20.tsx","DiceRoller.tsx","Page.tsx","TopBar.tsx","App.tsx","index.tsx"],"names":["DiceRollerD10","_React$useState","React","useState","_React$useState2","Object","slicedToArray","explodeMax","setExplodeMax","_React$useState3","_React$useState4","oneRemovesSuccess","setOneRemovesSuccess","_React$useState5","_React$useState6","maxCountsTwice","setMaxCountsTwice","_React$useState7","_React$useState8","numberToBeat","setNumberToBeat","_React$useState9","_React$useState10","amountOfDice","setAmountOfDice","_React$useState11","_React$useState12","maxRoll","setMaxRoll","_React$useState13","_React$useState14","autoSuccessString","setAutoSuccessString","_React$useState15","_React$useState16","results","setResults","clearResult","react_default","a","createElement","className","type","value","id","onChange","event","target","checked","htmlFor","onFocus","aria-label","e","style","width","marginLeft","onClick","values","sucesses","extraDiceCount","index","Math","floor","random","console","log","push","newResults","concat","join","disabled","rows","DiceRollerD20","amountofDices","setAmountofDices","modifierStrings","setModifierStrings","update","setUpdate","diceTypeArray","rollForTotal","diceType","diceCount","modArray","currentResults","diceRollTotal","toString","Fragment","diceArray","_loop","rowKey","diceTypeLabel","textLabel","AmountLabel","ModLabel","key","newAmountofDices","amountofDiceChange","newModifierStrings","modifiersChange","length","GenerateDice","undefined","$","Number","parseInt","modAmount","split","emptyArray","DiceRoller","src_DiceRollerD10","roller","setRoller","chooseRollerCheck","is","src_DiceRollerD20","name","defaultChecked","Page","src_DiceRoller","TopBar","Navbar","bg","variant","Container","Nav","Link","href","App","src_TopBar","src_Page","root","document","getElementById","ReactDOM","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.79072a9a.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction DiceRollerD10() {\r\n\r\n    // Values set by the user\r\n    let [explodeMax, setExplodeMax] = React.useState(false)\r\n    let [oneRemovesSuccess, setOneRemovesSuccess] = React.useState(false)\r\n    let [maxCountsTwice, setMaxCountsTwice] = React.useState(false)\r\n    let [numberToBeat, setNumberToBeat] = React.useState(\"\")\r\n    let [amountOfDice, setAmountOfDice] = React.useState(\"\")\r\n    let [maxRoll, setMaxRoll] = React.useState(\"\")\r\n    let [autoSuccessString, setAutoSuccessString] = React.useState(\"\")\r\n\r\n    // Calculated values\r\n    let [results, setResults] = React.useState(\"\")\r\n\r\n    function rollDice() {\r\n        let values = []\r\n        let sucesses = 0;\r\n        let extraDiceCount = 0\r\n\r\n        for (let index = 0; index < +amountOfDice || 0; index++) {\r\n            let value = Math.floor(Math.random() * +maxRoll);\r\n            value += 1\r\n            console.log(explodeMax)\r\n            if (value === 1 && oneRemovesSuccess) {\r\n                sucesses -= 1;\r\n            }\r\n            if (value >= +maxRoll) {\r\n                if (explodeMax) {\r\n                    extraDiceCount += 1;\r\n                }\r\n                if (maxCountsTwice) {\r\n                    sucesses += 1;\r\n                }\r\n            }\r\n            if (value >= +numberToBeat) {\r\n                sucesses += 1;\r\n            }\r\n\r\n            values.push(value);\r\n        }\r\n\r\n        for (let index = 0; index < extraDiceCount; index++) {\r\n            let value = Math.floor(Math.random() * +maxRoll);\r\n            value += 1\r\n            if (value >= +maxRoll) {\r\n                if (explodeMax) {\r\n                    extraDiceCount += 1;\r\n                }\r\n                if (maxCountsTwice) {\r\n                    sucesses += 1;\r\n                }\r\n            }\r\n            value += +autoSuccessString || 0;\r\n            if (value >= +numberToBeat) {\r\n                sucesses += 1;\r\n            }\r\n\r\n            values.push(value);\r\n        }\r\n\r\n        // Add auto successes\r\n        sucesses += +autoSuccessString || 0;\r\n\r\n        let newResults = results\r\n        if (newResults) {\r\n            newResults += \"\\n\"\r\n        }\r\n        newResults += `D${maxRoll}: ` + values.join(\", \")\r\n        newResults += \"\\nSuccesses = \" + sucesses\r\n        setResults(newResults)\r\n    }\r\n\r\n    const clearResult = () => {\r\n        setResults(\"\")\r\n    }\r\n\r\n    const clear = () => {\r\n        setNumberToBeat(\"\")\r\n        setAmountOfDice(\"\")\r\n        setAutoSuccessString(\"\")\r\n        setMaxRoll(\"\")\r\n        setResults(\"\")\r\n    }\r\n\r\n    return (\r\n        <div className=\"form\">\r\n            <div className=\"form-check\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"ExplodeMax\"\r\n                    onChange={(event) => { setExplodeMax(event.target.checked) }} />\r\n                <label className=\"form-check-label\" htmlFor=\"ExplodeMax\">\r\n                    Explode Dice When Max Dice Roll Is Hit\r\n                </label>\r\n            </div>\r\n            <div className=\"form-check\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"OneRemovesSuccess\"\r\n                    onChange={(event) => { setOneRemovesSuccess(event.target.checked) }} />\r\n                <label className=\"form-check-label\" htmlFor=\"OneRemovesSuccess\">\r\n                    Roll of 1 Removes a Success, unless on exploded dice\r\n                </label>\r\n            </div>\r\n            <div className=\"form-check\">\r\n                <input className=\"form-check-input\" type=\"checkbox\" value=\"\" id=\"MaxCountsTwice\"\r\n                    onChange={(event) => { setMaxCountsTwice(event.target.checked) }} />\r\n                <label className=\"form-check-label\" htmlFor=\"MaxCountsTwice\">\r\n                    Max Rolls Counts as Two Successes\r\n                </label>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-5 col-lg-5 col-mid-5\">\r\n                    <label className=\"form-label\" htmlFor='NumberToBeat'>Number to Beat</label>\r\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control col-3\"\r\n                        id=\"NumberToBeat\" aria-label=\"NumberToBeat\" value={numberToBeat}\r\n                        onChange={(e) => { setNumberToBeat(e.target.value) }} />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div style={{width: 132, marginLeft: 16}}>\r\n                    <label className=\"form-label\" htmlFor=\"MaxRoll\">Dice Type</label>\r\n                    <div className='form-inline'>\r\n                        <div className=\"input-group-prepend\">\r\n                            <div className=\"input-group-text\">D</div>\r\n                        </div>\r\n                        <input type=\"text\" className=\"form-control col 1\" value={maxRoll}\r\n                            onChange={(e) => { setMaxRoll(e.target.value) }}\r\n                            id=\"MaxRoll\" aria-label=\"MaxRoll\" />\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className='row'>\r\n                <div className=\"col-xl-5 col-lg-5 col-mid-5\">\r\n                    <label className=\"form-label\" htmlFor='Amount'>Amount of Dice</label>\r\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control col-3\" value={amountOfDice}\r\n                        onChange={(e) => { setAmountOfDice(e.target.value) }}\r\n                        id=\"Amount\" aria-label=\"Amount\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col-xl-5 col-lg-5 col-mid-5 mr-3 mb-2\">\r\n                    <label className=\"form-label\" htmlFor='AutoSuccess'>Auto Successes</label>\r\n                    <input type=\"text\" onFocus={clearResult} className=\"form-control col-3\" value={autoSuccessString}\r\n                        onChange={(e) => { setAutoSuccessString(e.target.value) }}\r\n                        id=\"AutoSuccess\" aria-label=\"AutoSuccess\" />\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <div className=\"btn-group form\">\r\n                        <button type=\"button\" onClick={rollDice}>Roll</button>\r\n                        <div className=\"pull-right\">\r\n                            <button type=\"button\" onClick={clear}>Clear</button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"row\">\r\n                <div className=\"col\">\r\n                    <label htmlFor='result'>Result</label>\r\n                    <textarea className=\"form-control\" disabled={true} rows={8} id=\"result\" value={results}></textarea>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\nexport default DiceRollerD10;\r\n","import React from 'react';\r\nimport $ from 'jquery';\r\n\r\nfunction DiceRollerD20() {\r\n\r\n  // Values set by the user\r\n  let [amountofDices, setAmountofDices] = React.useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\r\n  let [modifierStrings, setModifierStrings] = React.useState([\"\", \"\", \"\", \"\", \"\", \"\", \"\", \"\"])\r\n  let [update, setUpdate] = React.useState(0)\r\n  // Calculated values\r\n  let [results, setResults] = React.useState(\"\")\r\n\r\n  let diceTypeArray = [\"2\", \"4\", \"6\", \"8\", \"10\", \"12\", \"20\", \"100\"]\r\n\r\n  function RollDiceButtonClick(event: any) {\r\n    let currentResults = \"\"\r\n    for (let index = 0; index < diceTypeArray.length; index++) {\r\n      let diceType = diceTypeArray[index];\r\n      if ($(amountofDices[index]) !== undefined && amountofDices[index] !== \"\") {\r\n        let diceCount = Number.parseInt((amountofDices[index] || \"0\"));\r\n        let modAmount = modifierStrings[index] || \"\";\r\n        let modArray: string[] = []\r\n        if (modAmount) {\r\n          modArray = modAmount.toString().split(' ')\r\n        }\r\n        currentResults = rollForTotal(diceType, diceCount, modArray, currentResults);\r\n      }\r\n    }\r\n    setResults(currentResults)\r\n  }\r\n\r\n  function rollForTotal(diceType: string, diceCount: number, modArray: string[], currentResults: string) {\r\n    let values = []\r\n    let diceRollTotal = 0;\r\n    for (let index = 0; index < diceCount; index++) {\r\n      let value = Math.floor(Math.random() * +diceType);\r\n      value += 1\r\n      value += +modArray[index] || 0;\r\n      diceRollTotal += value;\r\n      values.push(value);\r\n    }\r\n    console.log(values)\r\n    let newResults = currentResults\r\n    if (newResults) {\r\n      newResults += \"\\n\"\r\n    }\r\n    newResults += ` D${diceType} ` + values.toString()\r\n    newResults += \"\\nTotal = \" + diceRollTotal\r\n    return newResults\r\n  }\r\n\r\n  const clearResult = () => {\r\n    setResults(\"\")\r\n  }\r\n\r\n  const clear = () => {\r\n    let emptyArray = []\r\n    for (let index = 0; index < diceTypeArray.length; index++) {\r\n      emptyArray.push(\"\")\r\n    }\r\n    setAmountofDices([...emptyArray])\r\n    setModifierStrings([...emptyArray])\r\n    setResults(\"\")\r\n  }\r\n\r\n  const amountofDiceChange = (index: number, value: string) => {\r\n    let newAmountofDices = amountofDices\r\n    newAmountofDices[index] = value\r\n    setAmountofDices(newAmountofDices)\r\n    setUpdate(update + 1)\r\n  }\r\n\r\n  const modifiersChange = (index: number, value: string) => {\r\n    let newModifierStrings = modifierStrings\r\n    newModifierStrings[index] = value\r\n    setModifierStrings(newModifierStrings)\r\n    setUpdate(update + 1)\r\n  }\r\n\r\n  const GenerateDice = () => {\r\n    let diceArray: any = []\r\n    for (let index = 0; index < diceTypeArray.length; index++) {\r\n      let diceType = diceTypeArray[index];\r\n      let rowKey = `D${diceType}Key`\r\n      let diceTypeLabel = `D${diceType}`\r\n      let textLabel = `D${diceType}Text`;\r\n      let AmountLabel = `D${diceType}Amount`;\r\n      let ModLabel = `D${diceType}Mod`;\r\n      diceArray.push(\r\n        <div className=\"row\" key={rowKey} >\r\n          <div className=\"col-2\">\r\n            <p aria-label={textLabel} id={textLabel}>{diceTypeLabel}</p>\r\n          </div>\r\n          <div className=\"col-3\">\r\n            <input type=\"text\" key={AmountLabel} onFocus={clearResult} className=\"form-control\"\r\n              id={AmountLabel} aria-label={AmountLabel} value={amountofDices[index]}\r\n              onChange={(event) => { amountofDiceChange(index, event.target.value) }} />\r\n          </div>\r\n          <div className=\"col-7\">\r\n            <input type=\"text\" key={ModLabel} onFocus={clearResult} className=\"form-control\"\r\n              id={ModLabel} aria-label={ModLabel} value={modifierStrings[index]}\r\n              onChange={(event) => { modifiersChange(index, event.target.value) }} />\r\n          </div>\r\n        </div>)\r\n    }\r\n    return diceArray\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"row\">\r\n        <p className=\"col-2\">Type</p>\r\n        <p className=\"col-3\">Amount of Dice</p>\r\n        <p className=\"col-7\">Modifiers (Space Seperated)</p>\r\n      </div>\r\n      <>{GenerateDice() || null}</>\r\n      <div className=\"row\">\r\n        <div className=\"col-1\">\r\n          <div className=\"btn-group\">\r\n            <button type=\"button\" onClick={RollDiceButtonClick}>Roll</button>\r\n            <div className=\"pull-right\">\r\n              <button type=\"button\" onClick={clear}>Clear</button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n      <div className=\"row\">\r\n        <label htmlFor='result'>Result</label>\r\n        <textarea className=\"form-control\" value={results} disabled={true} rows={8} id=\"result\"></textarea>\r\n      </div>\r\n      {/* TODO Add Custom die logic here */}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default DiceRollerD20;\r\n","import React from 'react';\r\nimport $ from 'jquery';\r\nimport DiceRollerD10 from './DiceRollerD10';\r\nimport DiceRollerD20 from './DiceRollerD20';\r\n\r\nfunction DiceRoller() {\r\n\r\n  const [roller, setRoller] = React.useState(<DiceRollerD10 />)\r\n\r\n  const chooseRollerCheck = () => {\r\n    if ($(\"#DicePoolSystem\").is(':checked')) {\r\n      setRoller(<DiceRollerD10 />)\r\n    }\r\n    if ($(\"#d20System\").is(':checked')) {\r\n      setRoller(<DiceRollerD20 />)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <div className=\"form-check\">\r\n        <input className=\"form-check-input\" type=\"radio\" name=\"RollerChoice\" defaultChecked\r\n          id=\"DicePoolSystem\" onChange={chooseRollerCheck} />\r\n        <label className=\"form-check-label\" htmlFor=\"DicePoolSystem\">\r\n          Dice Pool System\r\n        </label>\r\n      </div>\r\n      <div className=\"form-check\">\r\n        <input className=\"form-check-input\" type=\"radio\" name=\"RollerChoice\"\r\n          id=\"d20System\" onChange={chooseRollerCheck} />\r\n        <label className=\"form-check-label\" htmlFor=\"d20System\">\r\n          D20 System\r\n        </label>\r\n      </div>\r\n      {roller}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default DiceRoller;\r\n","import React from 'react';\nimport DiceRoller from './DiceRoller';\n\nfunction Page() {\n  return (\n    <div className=\"Page p-4\">\n      <DiceRoller></DiceRoller>\n    </div>\n  );\n}\n\nexport default Page;\n","import React from 'react';\r\nimport Navbar from 'react-bootstrap/Navbar';\r\nimport Nav from 'react-bootstrap/Nav';\r\nimport Container from 'react-bootstrap/Container';\r\n\r\nfunction TopBar() {\r\n  return (\r\n    <div>\r\n      <Navbar bg=\"dark\" variant=\"dark\">\r\n        <Container>\r\n          <Nav className=\"me-auto\">\r\n            <Nav.Link href=\"./DiceRoller\">Dice Roller</Nav.Link>\r\n          </Nav>\r\n        </Container>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default TopBar;\r\n","import React from 'react';\nimport Page from './Page';\nimport TopBar from './TopBar'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TopBar></TopBar>\n      <Page></Page>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'react-bootstrap';\nlet root = document.getElementById('root');\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>, root)\n"],"sourceRoot":""}